//       Author: yyyyyyyyyyyyyyyyyyyyyyyyyyy
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v7.0", FrameworkDisplayName = ".NET 7.0")]

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("CustomCLI")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("CustomCLI")]
[assembly: System.Reflection.AssemblyTitleAttribute("CustomCLI")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("Fib")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("Fib")]
[assembly: System.Reflection.AssemblyTitleAttribute("Fib")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

////fib bundle --o my-file.txt --l c# --n --s extension --rel --a "John Doe"
//using System.CommandLine;
//using System.IO;
//using System.Linq;

//var bundleOption = new Option<FileInfo>("--o", "File path and name")
//{
//    IsRequired = true
//};

//var languageOption = new Option<string[]>(
//    "--l",
//    description: "List of programming languages (e.g., C#, Java, Python, etc.). Use 'all' for all languages.",
//    parseArgument: result => result.Tokens.Select(t => t.Value).ToArray()
//)
//{
//    IsRequired = true
//};

//var noteOption = new Option<bool>("--n", "Include source file paths as comments in the bundle");

//var sortOption = new Option<string>(
//    "--s",
//    description: "Sort files by 'name' (alphabetically by file name) or 'extension' (by file type). Default is 'name'.",
//    getDefaultValue: () => "name"
//);

//var removeEmptyLinesOption = new Option<bool>(
//    "--rel",
//    description: "Remove empty lines from source code before bundling"
//);

//var authorOption = new Option<string>(
//    "--a",
//    description: "Specify the author of the bundle (adds an author comment at the top of the file)"
//);

//var bundleCommand = new Command("bundle", "Bundle code files to a single file");
//bundleCommand.AddOption(bundleOption);
//bundleCommand.AddOption(languageOption);
//bundleCommand.AddOption(noteOption);
//bundleCommand.AddOption(sortOption);
//bundleCommand.AddOption(removeEmptyLinesOption);
//bundleCommand.AddOption(authorOption);

//var languageExtensions = new Dictionary<string, string>
//{
//    { ".cs", "c#" },
//    { ".java", "java" },
//    { ".js", "javascript" },
//    { ".ts", "typescript" },
//    { ".py", "python" },
//    { ".html", "html" },
//    { ".css", "css" },
//    { ".sql", "sql" },
//    { ".sh", "bash" },
//    { ".ps1", "powershell" },
//    { ".json", "json" },
//    { ".xml", "xml" }
//};

//bundleCommand.SetHandler(
//    async (FileInfo output, string[] languages, bool note, string sort, bool removeEmptyLines, string author) =>
//    {
//        if (output == null || string.IsNullOrEmpty(output.FullName))
//        {
//            Console.WriteLine("Error: Invalid output file specified.");
//            return;
//        }

//        if (languages == null || !languages.Any())
//        {
//            Console.WriteLine("Error: No languages specified.");
//            return;
//        }

//        try
//        {
//            if (File.Exists(output.FullName))
//            {
//                Console.WriteLine("Error: Output file already exists. Please choose a different name.");
//                return;
//            }

//            var filesToInclude = Directory.GetFiles(".", "*", SearchOption.AllDirectories)
//                .Where(file =>
//                {
//                    var extension = Path.GetExtension(file).ToLower();
//                    return languages.Contains("all") ||
//                           languages.Any(lang => languageExtensions.TryGetValue(extension, out var matchedLang) && lang.Equals(matchedLang, StringComparison.OrdinalIgnoreCase));
//                })
//                .ToArray();

//            if (!filesToInclude.Any())
//            {
//                Console.WriteLine("No files found for the specified languages.");
//                return;
//            }

//            if (sort == "extension")
//            {
//                filesToInclude = filesToInclude.OrderBy(file => Path.GetExtension(file)).ThenBy(file => Path.GetFileName(file)).ToArray();
//            }
//            else
//            {
//                filesToInclude = filesToInclude.OrderBy(file => Path.GetFileName(file)).ToArray();
//            }

//            using var writer = new StreamWriter(output.FullName);

//            // הוספת שם היוצר בראש הקובץ
//            if (!string.IsNullOrWhiteSpace(author))
//            {
//                await writer.WriteLineAsync($"//       Author: {author}");
//            }

//            foreach (var file in filesToInclude)
//            {
//                if (note)
//                {
//                    var relativePath = Path.GetRelativePath(Directory.GetCurrentDirectory(), file);
//                    await writer.WriteLineAsync($"// Source file: {relativePath}");
//                }

//                Console.WriteLine($"Adding file: {file}");
//                var content = await File.ReadAllTextAsync(file);

//                if (removeEmptyLines)
//                {
//                    content = RemoveEmptyLines(content);
//                }

//                await writer.WriteLineAsync(content);
//            }

//            Console.WriteLine("Bundling process completed successfully!");
//        }
//        catch (Exception ex)
//        {
//            Console.WriteLine($"Error: {ex.Message}");
//        }
//    },
//    bundleOption, languageOption, noteOption, sortOption, removeEmptyLinesOption, authorOption);

//var rootCommand = new RootCommand("Root command for bundler CLI");
//rootCommand.AddCommand(bundleCommand);

//await rootCommand.InvokeAsync(args);

//string RemoveEmptyLines(string content)
//{
//    return string.Join("\n", content.Split('\n').Where(line => !string.IsNullOrWhiteSpace(line)));
//}

using System.CommandLine;
using System.IO;
using System.Linq;

// הגדרת פקודת bundle
var bundleOption = new Option<FileInfo>("--o", "File path and name")
{
    IsRequired = true
};

var languageOption = new Option<string[]>(
    "--l",
    description: "List of programming languages (e.g., C#, Java, Python, etc.). Use 'all' for all languages.",
    parseArgument: result => result.Tokens.Select(t => t.Value).ToArray()
)
{
    IsRequired = true
};

var noteOption = new Option<bool>("--n", "Include source file paths as comments in the bundle");

var sortOption = new Option<string>(
    "--s",
    description: "Sort files by 'name' (alphabetically by file name) or 'extension' (by file type). Default is 'name'.",
    getDefaultValue: () => "name"
);

var removeEmptyLinesOption = new Option<bool>(
    "--rel",
    description: "Remove empty lines from source code before bundling"
);

var authorOption = new Option<string>(
    "--a",
    description: "Specify the author of the bundle (adds an author comment at the top of the file)"
);

var bundleCommand = new Command("bundle", "Bundle code files to a single file");
bundleCommand.AddOption(bundleOption);
bundleCommand.AddOption(languageOption);
bundleCommand.AddOption(noteOption);
bundleCommand.AddOption(sortOption);
bundleCommand.AddOption(removeEmptyLinesOption);
bundleCommand.AddOption(authorOption);

var languageExtensions = new Dictionary<string, string>
{
    { ".cs", "c#" },
    { ".java", "java" },
    { ".js", "javascript" },
    { ".ts", "typescript" },
    { ".py", "python" },
    { ".html", "html" },
    { ".css", "css" },
    { ".sql", "sql" },
    { ".sh", "bash" },
    { ".ps1", "powershell" },
    { ".json", "json" },
    { ".xml", "xml" }
};

bundleCommand.SetHandler(
    async (FileInfo output, string[] languages, bool note, string sort, bool removeEmptyLines, string author) =>
    {
        if (output == null || string.IsNullOrEmpty(output.FullName))
        {
            Console.WriteLine("Error: Invalid output file specified.");
            return;
        }

        if (languages == null || !languages.Any())
        {
            Console.WriteLine("Error: No languages specified.");
            return;
        }

        try
        {
            if (File.Exists(output.FullName))
            {
                Console.WriteLine("Error: Output file already exists. Please choose a different name.");
                return;
            }

            var filesToInclude = Directory.GetFiles(".", "*", SearchOption.AllDirectories)
                .Where(file =>
                {
                    var extension = Path.GetExtension(file).ToLower();
                    return languages.Contains("all") ||
                           languages.Any(lang => languageExtensions.TryGetValue(extension, out var matchedLang) && lang.Equals(matchedLang, StringComparison.OrdinalIgnoreCase));
                })
                .ToArray();

            if (!filesToInclude.Any())
            {
                Console.WriteLine("No files found for the specified languages.");
                return;
            }

            if (sort == "extension")
            {
                filesToInclude = filesToInclude.OrderBy(file => Path.GetExtension(file)).ThenBy(file => Path.GetFileName(file)).ToArray();
            }
            else
            {
                filesToInclude = filesToInclude.OrderBy(file => Path.GetFileName(file)).ToArray();
            }

            using var writer = new StreamWriter(output.FullName);

            // הוספת שם היוצר בראש הקובץ
            if (!string.IsNullOrWhiteSpace(author))
            {
                await writer.WriteLineAsync($"//       Author: {author}");
            }

            foreach (var file in filesToInclude)
            {
                if (note)
                {
                    var relativePath = Path.GetRelativePath(Directory.GetCurrentDirectory(), file);
                    await writer.WriteLineAsync($"// Source file: {relativePath}");
                }

                Console.WriteLine($"Adding file: {file}");
                var content = await File.ReadAllTextAsync(file);

                if (removeEmptyLines)
                {
                    content = RemoveEmptyLines(content);
                }

                await writer.WriteLineAsync(content);
            }

            Console.WriteLine("Bundling process completed successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    },
    bundleOption, languageOption, noteOption, sortOption, removeEmptyLinesOption, authorOption);

// הגדרת פקודת create-rsp
var rspCommand = new Command("crsp", "Create a response file for the bundle command");

rspCommand.SetHandler(async () =>
{
    try
    {
        Console.Write("Enter response file name: ");
        var rspFileName = Console.ReadLine();

        if (string.IsNullOrWhiteSpace(rspFileName))
        {
            Console.WriteLine("Error: Response file name cannot be empty.");
            return;
        }

        if (!Path.IsPathFullyQualified(rspFileName))
        {
            rspFileName = Path.Combine(Directory.GetCurrentDirectory(), rspFileName + ".rsp");
        }

        if (File.Exists(rspFileName))
        {
            Console.WriteLine($"Error: The file '{rspFileName}' already exists. Choose a different name or delete the existing file.");
            return;
        }

        Console.WriteLine("Creating response file for the bundle command...");

        Console.Write("Enter output file path (--o): ");
        var output = Console.ReadLine();

        if (string.IsNullOrWhiteSpace(output))
        {
            output = "ttttttttam.txt"; // ערך ברירת מחדל
            Console.WriteLine($"No output file specified. Using default: {output}");
        }

        Console.Write("Enter languages (--l, separate multiple languages with spaces, or type 'all'): ");
        var languages = Console.ReadLine();

        if (string.IsNullOrWhiteSpace(languages))
        {
            languages = "all"; // ברירת מחדל
        }

        Console.Write("Sort files by? (--s, choose 'name' or 'extension'): ");
        var sort = Console.ReadLine();

        if (string.IsNullOrWhiteSpace(sort))
        {
            sort = "name"; // ברירת מחדל
        }

        Console.Write("Remove empty lines? (--rel) [yes/no]: ");
        var removeEmptyLines = Console.ReadLine()?.Trim().ToLower() == "yes" ? "--rel" : "";

        Console.Write("Enter author name (--a, optional): ");
        var author = Console.ReadLine();

        // יצירת התוכן בפורמט המבוקש
        var rspContent = $"--o {output}\n--l {languages}\n--s {sort}\n{removeEmptyLines}";

        if (!string.IsNullOrWhiteSpace(author))
        {
            rspContent += $"\n--author \"{author}\"";
        }

        // שמירת התוכן בקובץ rsp
        await File.WriteAllTextAsync(rspFileName, rspContent);

        Console.WriteLine($"Response file '{rspFileName}' created successfully!");
        Console.WriteLine($"Run the command: dotnet @{rspFileName}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error: {ex.Message}");
    }
});





// Root command
var rootCommand = new RootCommand("Root command for bundler CLI");
rootCommand.AddCommand(bundleCommand);
rootCommand.AddCommand(rspCommand);

await rootCommand.InvokeAsync(args);

string RemoveEmptyLines(string content)
{
    return string.Join("\n", content.Split('\n').Where(line => !string.IsNullOrWhiteSpace(line)));
}

//using System.CommandLine;
//using System.IO;
//using System.Linq;

//var bundleOption = new Option<FileInfo>("--output", "File path and name");
//var languageOption = new Option<string>("--language", "List of programming languages (e.g., C#, Java, Python, etc.)")
//{
//    IsRequired = true
//};

//var bundelCommand = new Command("bundle", "Bundle code files to a single file");
//bundelCommand.AddOption(bundleOption);
//bundelCommand.AddOption(languageOption);


//var languageExtensions = new Dictionary<string, string>
//{
//    { ".cs", "c#" },
//    { ".java", "java" },
//    // ... rest of the language extensions
//};

//bundelCommand.SetHandler(async context => // Destructure arguments from context
//{
//    var (outputFile, targetLanguages) = context.ParseResult; //Tuple with output and languages

//    try
//    {
//        var outputFilePath = outputFile.FullName;

//        // Check if output file already exists
//        if (File.Exists(outputFilePath))
//        {
//            Console.WriteLine("Error: Output file already exists. Please choose a different name.");
//            return;
//        }

//        var filesToInclude = GetFilesToBundle(targetLanguages, outputFile); // Pass output file

//        // Check if any files were found
//        if (!filesToInclude.Any())
//        {
//            Console.WriteLine("No files found matching the specified languages.");
//            return;
//        }

//        // Write bundled content to output file
//        using (var writer = new StreamWriter(outputFilePath))
//        {
//            foreach (var file in filesToInclude)
//            {
//                Console.WriteLine($"Adding file: {file}");
//                var content = await File.ReadAllTextAsync(file);
//                await writer.WriteLineAsync(content);
//            }
//        }

//        Console.WriteLine("Bundling process completed successfully!");
//    }
//    catch (Exception ex) when (ex is DirectoryNotFoundException || ex is IOException)
//    {
//        Console.WriteLine($"Error: {ex.Message}");
//    }
//});

//IEnumerable<string> GetFilesToBundle(string targetLanguages, FileInfo outputFile)
//{
//    var allLanguages = targetLanguages.Equals("all", StringComparison.OrdinalIgnoreCase);
//    return Directory.GetFiles(".", "*", SearchOption.AllDirectories)
//        .Where(file =>
//        {
//            var extension = Path.GetExtension(file).ToLower();
//            return (allLanguages || languageExtensions.ContainsKey(extension) && languageExtensions[extension] == targetLanguages) &&
//                   !file.Equals(outputFile.FullName, StringComparison.OrdinalIgnoreCase);
//        });
//}

//var rootCommand = new RootCommand("Root command for bundler CLI ");
//rootCommand.AddCommand(bundelCommand);

//rootCommand.InvokeAsync(args);
//using System.CommandLine;
//using System.IO;
//using System.Linq;

//var bundleOption = new Option<FileInfo>("--output", "File path and name");
//var languageOption = new Option<string[]>("--language", "A list of programming languages to include, or 'all' to include all.")
//{
//    IsRequired = true
//};


//var bundelCommand = new Command("bundle", "Bundle code files to a single file");
//bundelCommand.AddOption(bundleOption);
//bundelCommand.AddOption(languageOption);

//var languageExtensions = new Dictionary<string, string>
//{
//    { ".cs", "c#" },
//    { ".java", "java" },
//    { ".js", "javascript" },
//    { ".ts", "typescript" },
//    { ".py", "python" },
//    { ".html", "html" },
//    { ".css", "css" },
//    { ".sql", "sql" },
//    { ".sh", "bash" },
//    { ".ps1", "powershell" },
//    { ".json", "json" },
//    { ".xml", "xml" }
//};



//bundelCommand.SetHandler((output, languages) =>
//{
//    try
//    {
//        if (File.Exists(output.FullName))
//        {
//            Console.WriteLine("Error: The file already exists. Please choose a different name.");
//            return;
//        }
//        // Create the file
//        using (var stream = File.Create(output.FullName))
//        {
//            Console.WriteLine("File was created");
//        }

//        //כתיבה לקובץ
//        //using (var writer = new StreamWriter(output.FullName, true)) 
//        //{
//        //    writer.WriteLine("successsssss");
//        //}

//        //Console.WriteLine("Successfully wrote to the file.");
//        var filesToInclude = Directory.GetFiles(".", "*", SearchOption.AllDirectories)
//            .Where(file =>
//            {
//                var extension = Path.GetExtension(file).ToLower();
//                return languages.Contains("all") ||
//                       languages.Any(lang => languageExtensions.TryGetValue(extension, out var langMatch) && langMatch == lang);
//            });

//        if (!filesToInclude.Any())
//        {
//            Console.WriteLine("No files matched the specified languages.");
//            return;
//        }
//        //=================================================
//        using (var writer = new StreamWriter(output.FullName, true)) // Append mode
//        {
//            foreach (var file in filesToInclude)
//            {
//                Console.WriteLine($"Adding file: {file}");
//                var content = File.ReadAllText(file);
//                writer.WriteLine(content);
//            }
//        }
//        Console.WriteLine("Bundling completed successfully!");

//    }

//    catch (DirectoryNotFoundException ex)
//    {
//        Console.WriteLine($"Error: {ex.Message}");
//    }

//}, bundleOption, languageOption);

//var rootCommand = new RootCommand("Root command for bundler CLI ");
//rootCommand.AddCommand(bundelCommand);

//rootCommand.InvokeAsync(args);


//using System.CommandLine;
//using System.CommandLine.Parsing;
//using System.IO;
//using System.Linq;

//var bundleOption = new Option<FileInfo>("--output", "File path and name");
//var languageOption = new Option<string[]>("--language", () => new string[] { }, "A list of programming languages to include");
//languageOption.IsRequired = true;



//var bundleCommand = new Command("bundle", "Bundle code file a single file");
//var languageExtensions = new Dictionary<string, string>
//{
//    { ".cs", "c#" },
//    { ".java", "java" },
//    { ".js", "javascript" },
//    { ".ts", "typescript" },
//    { ".py", "python" },

//    // שפות תבנית
//    { ".html", "html" },
//    { ".htm", "html" },
//    { ".css", "css" },
//    { ".scss", "scss" },

//    // שפות שאילתות
//    { ".sql", "sql" },

//    // שפות תסריט
//    { ".sh", "bash" },
//    { ".ps1", "powershell" },
    
//    // שפות אחרות
//    { ".json", "json" },
//    { ".xml", "xml" },
   

//    // ... הוסף התאמות נוספות לפי הצורך
//};
////Autocomplete

//bundleCommand.AddOption(bundleOption);
//bundleCommand.AddOption(languageOption);

//bundleCommand.SetHandler(async (output, languages) =>
//{
//    try
//    {
//        if (File.Exists(output.FullName))
//        {
//            Console.WriteLine("File name exists already, change it and try again...");
//            return;
//        }
//        using (var stream = File.Create(output.FullName))
//        {
//            await stream.FlushAsync();
//        }
//        Console.WriteLine("File was created");

//        var filesToInclude = Directory.GetFiles(".", "*", SearchOption.AllDirectories) // Search recursively
//            .Where(file =>
//            {
//                var extension = Path.GetExtension(file).ToLower();
//                return languages.Contains("all") ||
//                       languages.Any(lang => languageExtensions.TryGetValue(extension, out var matchedLang) && languages.Contains(matchedLang));
//            });
//        // Handle unknown extensions (optional)
//        var unknownExtensions = filesToInclude.Select(f => Path.GetExtension(f))
//            .Distinct()
//            .Except(languageExtensions.Keys); // Find extensions not in the dictionary

//        if (unknownExtensions.Any())
//        {
//            Console.WriteLine("Warning: Found files with unknown extensions:");
//            foreach (var ext in unknownExtensions)
//            {
//                Console.WriteLine($"- {ext}");
//            }
//            Console.WriteLine("These files will not be included in the bundle.");
//        }

//        // Write content to the output file (specific logic needed based on language types)
//        /////////////////////////////////////////////////////////////////
//        if (File.Exists(output.FullName))
//        {
//            try
//            {
//                using (File.Open(output.FullName, FileMode.Open, FileAccess.ReadWrite, FileShare.None))
//                {
//                    // הקובץ פנוי
//                }
//            }
//            catch (IOException)
//            {
//                Console.WriteLine("The file is currently in use. Please close any programs that might be using it.");
//                return;
//            }
//        }
//        //////////////////////////////////////////////////////////////////////
//        using (var writer = new StreamWriter(output.FullName, false)) // יוצר את הקובץ אם אינו קיים
//        {
//            foreach (var file in filesToInclude)
//            {
//                Console.WriteLine($"Adding file: {file}");
//                var content = await File.ReadAllTextAsync(file);
//                await writer.WriteLineAsync(content);
//            }
//        }

//        Console.WriteLine("Bundling completed successfully!");

//    }
//    catch (DirectoryNotFoundException ex)
//    {
//        Console.WriteLine("Error: Invalid file path.");
//    }
//    catch (IOException ex)
//    {
//        Console.WriteLine($"Error: The file is already in use or cannot be accessed. Details: {ex.Message}");
//    }
//    catch (Exception ex) // Catch other potential exceptions
//    {
//        Console.WriteLine($"Error: {ex.Message}");
//    }

//}, bundleOption, languageOption);

//var rootCommand = new RootCommand("Root command for File Bundler CLI");

//rootCommand.AddCommand(bundleCommand);

//rootCommand.InvokeAsync(args);


